#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    /* input config for mouse move mode */
    trackball_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <0 1 2>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <2>;

        // bindings = <&ib_toggle_layer 7>;
    };
	
    /* input config for mouse scroll mode */
    trackball_scroll_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <3>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_MISC>;
        y-input-code = <INPUT_REL_WHEEL>;
        y-invert;
        bindings = <&ib_wheel_scaler 1 14>;
    };
	
    /* define a resolution down scaler only for INPUT_REL_WHEEL */
    ib_wheel_scaler: ib_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };

    /* adjust cooldown waiting period for mouse key layer after activated */
    ib_toggle_layer: ib_toggle_layer {
        compatible = "zmk,input-behavior-tog-layer";
        #binding-cells = <1>;
        time-to-live-ms = <750>;
    };

    combos {
        compatible = "zmk,combos";

        bt_reset {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <54 55>;
            layers = <0>;
        };
		
	rh_leftClick {
            bindings = <&mkp LCLK>;
            key-positions = <43 44>;
        };

        rh_rightClick {
            bindings = <&mkp RCLK>;
            key-positions = <44 45>;
        };

        rh_middleClick {
            bindings = <&mkp MCLK>;
            key-positions = <44 45 43>;
        };

        lh_leftClick {
            bindings = <&mkp LCLK>;
            key-positions = <40 39>;
        };

        lh_rightClick {
            bindings = <&mkp RCLK>;
            key-positions = <38 39>;
        };

        lh_middleClick {
            bindings = <&mkp MCLK>;
            key-positions = <38 39 40>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&kp ESC           &kp N1  &kp N2  &kp N3     &kp N4         &kp N5          &kp N6      &kp N7     &kp N8     &kp N9   &kp N0     &kp DELETE
&kp TAB           &kp Q   &kp W   &kp E      &kp R          &kp T           &kp Y       &kp U      &kp I      &kp O    &kp P      &kp BACKSLASH
&kp LEFT_CONTROL  &kp A   &kp S   &kp D      &kp F          &kp G           &kp H       &kp J      &kp K      &kp L    &kp SEMI   &kp APOS
&kp LEFT_SHIFT    &kp Z   &kp X   &kp C      &kp V          &kp B           &kp N       &kp M      &kp COMMA  &kp DOT  &kp SLASH  &tog 3
                                  &kp SPACE  &kp BACKSPACE  &kp LEFT_WIN    &kp DELETE  &kp ENTER
                                             &kp LEFT_ALT   &mo 1           &mo 2
            >;
        };

        Navigation {
            bindings = <
&kp GRAVE  &kp F1         &kp F2         &kp F3         &kp F4   &kp F5           &kp F6    &kp F7          &kp F8          &kp F9           &kp F10          &trans
&trans     &kp LA(LC(Q))  &kp LA(LC(W))  &kp LS(F11)    &kp F5   &kp LA(LC(H))    &trans    &kp PAGE_UP     &kp UP_ARROW    &kp PAGE_DOWN    &kp PRINTSCREEN  &kp F11
&trans     &trans         &kp LS(F11)    &kp F10        &kp F11  &kp F9           &kp HOME  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp F8           &kp F12
&trans     &trans         &trans         &kp LA(LC(C))  &trans   &kp LA(LC(B))    &kp END   &trans          &trans          &trans           &trans           &trans
                                         &trans         &trans   &trans           &trans    &trans
                                                        &trans   &trans           &trans
            >;
        };

        NumAndSpecial {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans                &trans                 &trans     &trans          &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PLUS   &kp MINUS       &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp EQUAL  &kp UNDERSCORE  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans     &trans          &trans
                        &trans  &trans  &trans    &trans  &trans
                                &trans  &trans    &trans
            >;
        };

        MouseScroll {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
                                &trans  &trans    &trans
            >;
        };
    };
};
